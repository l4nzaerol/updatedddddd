<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('inventory_transactions', function (Blueprint $table) {
            // Add missing columns without foreign key constraints for now
            if (!Schema::hasColumn('inventory_transactions', 'product_id')) {
                $table->unsignedBigInteger('product_id')->nullable()->after('material_id');
            }
            if (!Schema::hasColumn('inventory_transactions', 'order_id')) {
                $table->unsignedBigInteger('order_id')->nullable()->after('product_id');
            }
            if (!Schema::hasColumn('inventory_transactions', 'production_id')) {
                $table->unsignedBigInteger('production_id')->nullable()->after('order_id');
            }
            if (!Schema::hasColumn('inventory_transactions', 'user_id')) {
                $table->unsignedBigInteger('user_id')->nullable()->after('production_id');
            }
            if (!Schema::hasColumn('inventory_transactions', 'location_id')) {
                $table->unsignedBigInteger('location_id')->nullable()->after('user_id');
            }
            if (!Schema::hasColumn('inventory_transactions', 'unit_cost')) {
                $table->decimal('unit_cost', 10, 2)->nullable()->after('quantity');
            }
            if (!Schema::hasColumn('inventory_transactions', 'total_cost')) {
                $table->decimal('total_cost', 12, 2)->nullable()->after('unit_cost');
            }
            if (!Schema::hasColumn('inventory_transactions', 'batch_number')) {
                $table->string('batch_number')->nullable()->after('total_cost');
            }
            if (!Schema::hasColumn('inventory_transactions', 'expiry_date')) {
                $table->date('expiry_date')->nullable()->after('batch_number');
            }
            if (!Schema::hasColumn('inventory_transactions', 'status')) {
                $table->enum('status', ['pending', 'completed', 'cancelled', 'reversed'])->default('completed')->after('expiry_date');
            }
            if (!Schema::hasColumn('inventory_transactions', 'priority')) {
                $table->enum('priority', ['low', 'normal', 'high', 'urgent'])->default('normal')->after('status');
            }
            if (!Schema::hasColumn('inventory_transactions', 'source_data')) {
                $table->json('source_data')->nullable()->after('metadata');
            }
            if (!Schema::hasColumn('inventory_transactions', 'cost_breakdown')) {
                $table->json('cost_breakdown')->nullable()->after('source_data');
            }
            if (!Schema::hasColumn('inventory_transactions', 'quality_metrics')) {
                $table->json('quality_metrics')->nullable()->after('cost_breakdown');
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('inventory_transactions', function (Blueprint $table) {
            $table->dropColumn([
                'product_id', 'order_id', 'production_id', 'user_id', 'location_id',
                'unit_cost', 'total_cost', 'batch_number', 'expiry_date', 'status',
                'priority', 'source_data', 'cost_breakdown', 'quality_metrics'
            ]);
        });
    }
};
